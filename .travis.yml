# ==================================================================
#  tubex-lib - travis test script
# ==================================================================

language: c++

addons:
  apt:
    sources:
    - deadsnakes
    - chef-current-precise

    packages:
    - cmake

matrix:
  include:
  - os: linux
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - g++-5
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5"
  - os: linux
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - g++-7
    env:
      - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
  - os: linux
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - g++-8
    env:
      - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"

before_install:
  - eval "${MATRIX_EVAL}"

cache:
  directories:
    - $HOME/capd
    - $HOME/ibex-lib

#services:
#  - docker
#
#env: DOCKER_IMAGE=quay.io/pypa/manylinux1_x86_64

install:
  
  # For documentation
  - sudo apt-get install python3.5 python3-setuptools python3-pip
  - sudo python3 -m pip install sphinx_rtd_theme breathe sphinx-tabs
  - sudo apt-get install python3-sphinx doxygen graphviz

  # For Python wrapping
  - sudo python3 -m pip install --upgrade pip
  - sudo python3 -m pip install pyibex
  - sudo python3 -m pip install --upgrade pyibex==1.8.0


#  - docker pull $DOCKER_IMAGE
  
  - pwd
  - ls
  - export ORIGIN_DIR=$PWD

  # IBEX
  - bash scripts/ibex.sh

  # CAPD
  - bash scripts/capd.sh

  # Environment variables
  - export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$HOME/tubex-lib/build_install
  - export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$HOME/ibex-lib/build_install
  - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib

script:

  - py_version=$(python -c "import sys; print(sys.version[:3])") # default python version
  - echo "$py_version"
  
  - cd $ORIGIN_DIR
  - pwd
  - ls
  - git submodule init ; git submodule update # for pybind11 submodule
  - mkdir build -p
  - cd build
  
  # Without synthesis tree
  
  # Building lib + tests
  - cmake -DCMAKE_INSTALL_PREFIX=$HOME/tubex-lib/build_install -DCMAKE_PREFIX_PATH=$HOME/ibex-lib/build_install -DWITH_PYTHON=ON -DBUILD_TESTS=ON -DWITH_TUBE_TREE=OFF -DWITH_CAPD=ON -DPYTHON_VERSION="$py_version" ..
  - make
  - make api
  - make doc
  - make install
  # Building the examples
  - cd ../examples
  - find . -type d -name build -prune -exec rm -rf {} \;
  - cd basics
  - find . -name "ex\_*" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ../robotics
  - find . -name "ex\_*" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ../tuto
  - find . -name "ex\_*" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ../lie_group
  - find . -name "ex\_*" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ../../build
  # Testing
  - make test
    
  # With synthesis tree for all created tubes
  
  # Building lib + tests
  - cmake -DCMAKE_INSTALL_PREFIX=$HOME/tubex-lib/build_install -DCMAKE_PREFIX_PATH=$HOME/ibex-lib/build_install -DBUILD_TESTS=ON -DWITH_TUBE_TREE=ON -DWITH_CAPD=ON -DPYTHON_VERSION="$py_version" ..
  - make
  - make api
  - make doc
  - make install
  # Building the examples
  - cd ../examples
  - find . -type d -name build -prune -exec rm -rf {} \;
  - cd basics
  - find . -name "ex\_*" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ../robotics
  - find . -name "ex\_*" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ../tuto
  - find . -name "ex\_*" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ../lie_group
  - find . -name "ex\_*" | xargs -L 1 bash -c 'cd "$0" && ./build.sh && cd ..'
  - cd ../../build
  # Testing
  - make test